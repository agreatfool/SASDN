import {GatewayApiBase, GatewayContext, MiddlewareNext} from "sasdn";
{{#each info.protoMsgImportPath}}
import {{curlyLeft}}{{#each this}}{{this}}, {{/each}}{{curlyRight}} from "{{{@key}}}";
{{/each}}

interface RequestParams {
{{#each info.parameters}}
{{#eq this.type "object"}}
    {{this.name}}{{#eq this.required false}}?{{/eq}}: {{#eq ../info.requestTypeStr false}}any{{else}}{{../info.requestTypeStr}}.AsObject{{/eq}};
{{else}}
    {{this.name}}{{#eq this.required false}}?{{/eq}}: {{#eq this.type "array"}}Array<any>{{else}}{{this.type}}{{/eq}};
{{/eq}}
{{/each}}
}

class {{info.apiName}} extends GatewayApiBase {
    constructor() {
        super();
        this.method = '{{info.method}}';
        this.uri = '{{info.uri}}';
        this.type = 'application/json; charset=utf-8';
        this.schemaDefObj = {
        {{#each info.parameters}}
            {{this.name}}: {
                type: '{{this.type}}',
                required: {{this.required}},
                {{#if this.schema}}
                schema: {
                {{#each this.schema}}
                    {{this.name}}: {
                        type: '{{this.type}}',
                        required: {{this.required}},
                        {{#if this.schema}}
                        schema: {
                        {{#each this.schema}}
                            {{this.name}}: {
                                type: '{{this.type}}',
                                required: {{this.required}},
                                {{#if this.schema}}
                                schema: {
                                {{#each this.schema}}
                                    {{this.name}}: {
                                        type: '{{this.type}}',
                                        required: {{this.required}},
                                    },
                                {{/each}}
                                },
                                {{/if}}
                            },
                        {{/each}}
                        },
                        {{/if}}
                    },
                {{/each}}
                },
                {{/if}}
            },
        {{/each}}
        };
    }

    public async handle(ctx: GatewayContext, next: MiddlewareNext, params: RequestParams): Promise<{{ info.responseTypeStr }}.AsObject> {
        return await new {{ info.responseTypeStr }}().toObject();
    }
}

export const api = new {{info.apiName}}();