///<reference path="../../node_modules/grpc-tsd/src/grpc.d.ts"/>
import {IServerCall, RpcImplCallback} from "grpc";
import {RpcApplication, WrappedHandler} from "sasdn";

{{#each infos}}
import {
    {{#each this.services}}
    {{@key}}Service,
    {{/each}}
} from "{{{this.protoServiceImportPath}}}";
{{/each}}
{{#each infos}}

    {{#each this.services}}

        {{#each this}}
import {{curlyLeft}}{{{this.methodName}}}Handler{{curlyRight}} from "./{{#eq ../../this.protoFile.relativePath "."}}{{else}}{{../../this.protoFile.relativePath}}/{{/eq}}{{../../this.protoFile.svcNamespace}}/{{@../key}}/{{{this.methodName}}}";
        {{/each}}
    {{/each}}
{{/each}}

export const registerServices = function (app: RpcApplication) {
{{#each infos}}
    {{#each this.services}}

    app.server.addService({{@key}}Service, {
        {{#each this}}
        {{{this.methodName}}}: async (call: IServerCall{{#if this.hasCallback}}, callback: RpcImplCallback{{/if}}) => {
            let wrappedHandler: WrappedHandler = app.wrapGrpcHandler({{{this.methodName}}}Handler);
            wrappedHandler(call{{#if this.hasCallback}}, callback{{/if}}).then(_ => _);
        },
        {{/each}}
    });
    {{/each}}
{{/each}}

};